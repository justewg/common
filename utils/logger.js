'use strict';

const moment = require('moment')

const colors = require('../constants/color')


require('dotenv').config()


const LOG_INIT = 'init'                     // —Å—Ç—Ä–æ–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤, –º–æ–¥—É–ª–µ–π
const LOG_QUERIES = 'queries'               // —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
const LOG_METHOD_CALLS = 'method_calls'     // –≤—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤
const LOG_REQUESTS = 'requests'             // –∑–∞–ø—Ä–æ—Å—ã –∫ API
const LOG_RESPONSES = 'responses'           // –æ—Ç–≤–µ—Ç—ã –æ—Ç API –∏ –ë–î
const LOG_ERRORS = 'errors'                 // –æ—à–∏–±–∫–∏
const LOG_DEBUG = 'debug'                   // –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

// –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ –∫—Ä–æ–º–µ –æ—à–∏–±–æ–∫
const LOG_ALL = [LOG_INIT, LOG_QUERIES, LOG_METHOD_CALLS, LOG_REQUESTS, LOG_RESPONSES, LOG_DEBUG, LOG_ERRORS]

// –£—Ä–æ–≤–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
// const LOG_OFF = []
// const SILIENT = LOG_OFF

// –ü–æ–∑–≤–æ–ª—è—Ç—å –ª–∏ —Ü–≤–µ—Ç–æ–≤—É—é —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ –ª–æ–≥–∞ (true|false)
const COLOR = !process.env.hasOwnProperty('COLOR_LOG') || ['0', 'off'].indexOf(process.env.COLOR_LOG.toLowerCase()) === -1


let LOG_LEVEL = LOG_ALL


/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * @param level –°—Ç—Ä–æ–∫–∞, –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const setLogLevel = (level) => {
    if (typeof level === 'string' || Array.isArray(level)) {
        LOG_LEVEL = level
    } else if (typeof level === 'object' && level.hasOwnProperty('except')) {
        if (typeof level.except === 'string') {
            level.except = level.except.split(/ +/)
        }
        LOG_LEVEL = LOG_ALL.filter(l => level.except.indexOf(l) === -1)
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º –¥–ª—è –ª–æ–≥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–µ
 *
 * @returns {*}
 */
const getDT = () => {
    return moment().format("DD/MM/YYYY HH:mm:ss")
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ª–æ–≥ —á–µ—Ä–µ–∑ —Ñ–µ–π–∫–æ–≤—ã–π –µ—Ä—Ä–æ—Ä-—Å—Ç–µ–∫
 *
 * @returns {string}
 */
const getRelPathFrom = () => {
    let relPath = ''
    try {
        throw new Error();
    } catch (e) {
        const pathToFile = e.stack.split('\n')[3].replace(/^.+\(([^)]+)\).*$/, '$1')
        relPath = colors.FadeOn + '(' + (pathToFile ? pathToFile.replace(new RegExp(process.cwd()), '') : pathToFile) + ')' + colors.Reset
    }
    return relPath
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ —Ç–æ–≥–æ, –≤—Ö–æ–¥–∏—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * @param what
 * @returns {boolean}
 */
const includes = (what) => {
    let level = LOG_LEVEL
    if (typeof level === 'string') {
        level = level.split(/ +/)
    }
    return level.indexOf(what) > -1
}

/**
 * –û—á–∏—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ—Ç —Ü–≤–µ—Ç–æ–≤—ã—Ö –∫–æ–¥–æ–≤ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
 *
 * @param args
 * @returns {Array}
 */
const removeColors = (args) => {
    return args.map(s => {
        Object.keys(colors).map(ck => {
            if (typeof s === 'string') {
                s = s.replace(colors[ck], '')
            }
        })
        return s
    })
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—ä–µ–∫—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * @param loggerModule - –û–±—ä–µ–∫—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (default: console)
 * @returns {{log: (function(...[*]=)), error: (function(...[*]=)), debug: (function(...[*]=)), includes: (function(*=)), setLogLevel: (function(*=))}}
 */
const getLoggerModule = (loggerModule) => {
    if (!loggerModule) {
        loggerModule = console
    }
    return {
        log: ((...args) => {
            args = [].concat.apply([].concat.apply([getDT()], args).concat([getRelPathFrom()]))
            if (!COLOR) {
                args = removeColors(args)
            }
            loggerModule.log.apply(null, args)
        }),
        error: ((...args) => {
            let sign = 'üö´'
            if (!includes(LOG_ERRORS)) {
                args = ['–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–æ']
                sign = '‚ö†Ô∏è'
            }
            args = [].concat.apply([].concat.apply([getDT()], [sign + ' ']).concat(args).concat([getRelPathFrom()]))
            if (!COLOR) {
                args = removeColors(args)
            }
            loggerModule.error.apply(null, args)
        }),
        debug: ((...args) => {
            if (!includes(LOG_DEBUG)) {
                args = ['‚ö†Ô∏è  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ']
            }
            args = [].concat.apply([].concat.apply([getDT()], args).concat([getRelPathFrom()]))
            if (!COLOR) {
                args = removeColors(args)
            }
            loggerModule.debug.apply(null, args)
        }),
        includes: includes,
            setLogLevel: setLogLevel
    }
}

module.exports = (args = {}) => {
    // –ï—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª, –∏–Ω–∞—á–µ - –æ–±—ã—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å
    if (args.hasOwnProperty('log_to_file') && args['log_to_file'] === true) {
        const fs = require('fs')
        const Console = require('console')

        require('dotenv').config()

        const logfile = args.log_file || __dirname + '/../' + process.env.LOG_FILE

        const output = fs.createWriteStream(logfile, { 'flags': 'a' });
        const errorOutput = fs.createWriteStream(logfile, { 'flags': 'a' });
        const loggerModule = new Console.Console(output, errorOutput);

        return getLoggerModule(loggerModule)
    } else {
        return getLoggerModule(console)
    }
}
